# -*- coding: utf-8 -*-
"""train

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/train-de66a305-6745-4c1a-98c9-fe115629f1ee.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250323/auto/storage/goog4_request%26X-Goog-Date%3D20250323T173116Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D61789671f1dd306f5e75c70ffc6a4780bef781b7ff1d9ab91a38b99859dfd2198f276d0a6898bc080d07124d6ea78b21950ef620c37907c0cb0b815e1b22c6753fd9fd55d04d047b8b5ca6441d69de5a77513a860480380232c8d4dcec5e4d4b70f0cf3602a484907a7e789eb5fcaf349472a882cc0a207d2743b7d87baed53d7a94fc7cf274b94b5915ce1839711f0f37d5d3a9318a660d694c622a4b952a8dcaf92db4aa8a00d6432437d04f4860b392adecaef3f9517051e7fc0a2abe6302d5cc4befd01824f716c408564669948578ee3b5c1a092656c324ea30199f40c7a4f2397d88134b74e4fc2ad3c8fca222ac5f33089185e148ec26d08f104c394d
"""

!pip install stable-baselines3==2.1.0 gymnasium[atari] ale-py imageio matplotlib

!pip install gymnasium[accept-rom-license]

import gymnasium as gym
from stable_baselines3 import DQN
from stable_baselines3.common.env_util import make_atari_env
from stable_baselines3.common.callbacks import CheckpointCallback
from stable_baselines3.common.logger import configure
from stable_baselines3.common.vec_env import VecFrameStack

# Use the Breakout environment (NoFrameskip version for Atari pre-processing)
env_id = "BreakoutNoFrameskip-v4"

# Create the environment with a single instance and a fixed seed for reproducibility.
env = make_atari_env(env_id, n_envs=1, seed=42)

# Stack 4 consecutive frames (standard for Atari agents)
env = VecFrameStack(env, n_stack=4)

# Use the CNN policy
policy = "CnnPolicy"

model = DQN(
    policy,
    env,
    learning_rate=1e-4,
    gamma=0.99,
    batch_size=32,
    buffer_size=100000,
    exploration_initial_eps=1.0,
    exploration_final_eps=0.01,
    exploration_fraction=0.1,
    target_update_interval=1000,
    train_freq=4,
    gradient_steps=1,
    verbose=1,
    tensorboard_log="./dqn_tensorboard/"
)

# Configure logger to output to stdout, CSV, and tensorboard
logger = configure("./dqn_logs/", ["stdout", "csv", "tensorboard"])
model.set_logger(logger)

# Callback to save the model at every 10,000 steps
checkpoint_callback = CheckpointCallback(save_freq=10000, save_path="./checkpoints/")

# training for 1,000,000 timesteps now
model.learn(
    total_timesteps=1_000_000,
    callback=checkpoint_callback,
    tb_log_name="dqn_breakout"
)

# Save the final model
model.save("dqn_breakout_model")

env.close()

import os
print(os.listdir('.'))

from IPython.display import FileLink
FileLink("dqn_breakout_model.zip")

